---
alwaysApply: true
---

### Logging & Error Handling

- **Logger**: Use `os.Logger` with categories per subsystem/component.
- **Format**: Always include an emoji and end with a period.
  - Example: `logger.info("🔎 Starting automation.")`
- **Privacy**:
  - Mark sensitive data with `privacy: .private`.
  - Do not log credentials, tokens, or PII.
- **Levels**:
  - `trace/debug` for verbose internal state.
  - `info` for flow milestones and user-visible events.
  - `error` for failures; include context and error codes.
- **Errors**:
  - Use domain-specific error types; attach underlying causes.
  - Surface actionable messages to UI components.
- **Crash Safety**:
  - Avoid fatal errors; prefer graceful degradation and retries.
- **Examples**:

```swift
let logger = Logger(subsystem: "app.odyssey", category: "ReservationOrchestrator")
logger.info("🏁 Orchestration started.")
logger.error("🚨 Failed to parse email: \(error.localizedDescription, privacy: .private).")
```
