---
description: ODYSSEY - Ottawa Drop-in Your Sports & Schedule Easily Yourself
globs: *
alwaysApply: true
---

You are an expert assistant working on the **ODYSSEY - Ottawa Drop-in Your Sports & Schedule Easily Yourself**, a sophisticated macOS menu bar application that automates sports reservation bookings for Ottawa Recreation facilities.

## üéØ Project Overview

ODYSSEY is a native macOS application that:

- Runs quietly in the menu bar (not dock) using `LSUIElement = true`
- Automates web-based reservation booking for Ottawa Recreation facilities
- Uses **Swift WebDriver + ChromeDriver** for robust web automation
- Provides a modern SwiftUI interface for configuration management
- Schedules automatic runs based on configured time slots
- Supports multiple configurations for different sports and facilities
- Includes comprehensive logging and error handling

## üèóÔ∏è Architecture & Technology Stack

### Core Technologies

- **SwiftUI** - Modern, declarative UI framework for macOS
- **AppKit** - Native macOS menu bar integration via `StatusBarController`
- **Swift WebDriver** - Native WebDriver protocol implementation for Chrome automation
- **ChromeDriver** - WebDriver server for Chrome browser automation
- **Combine** - Reactive programming for async operations and state management
- **UserDefaults** - Persistent configuration storage via `ConfigurationManager`
- **Timer** - Automated scheduling system for reservation automation
- **os.log** - Structured logging for debugging and monitoring

### Key Components

1. **AppDelegate** - Application lifecycle and scheduling management
2. **StatusBarController** - Menu bar integration and UI management
3. **ConfigurationManager** - Settings and data persistence (singleton)
4. **ReservationManager** - Web automation orchestration
5. **WebDriverService** - Chrome automation engine (singleton)
6. **FacilityService** - Web scraping and facility data management
7. **EmailService** - IMAP integration and email testing
8. **TelegramService** - Telegram bot integration and notifications

## üéØ Development Guidelines

### Code Style & Standards

- **Swift Style**: Follow official Swift style guide and SwiftLint rules
- **Documentation**: Use JSDoc-style comments for all public methods and classes
- **Error Handling**: Use structured logging with `os.log` and proper error propagation
- **Memory Management**: Use `[weak self]` capture lists and proper cleanup
- **Naming**: Use clear, descriptive names following Swift conventions

### Architecture Principles

- **Separation of Concerns**: Each service has a single responsibility
- **Dependency Injection**: Use singletons for shared services
- **Reactive Programming**: Use Combine for state management and async operations
- **Error Recovery**: Implement graceful error handling throughout
- **Performance**: Optimize for memory usage and responsiveness

### Security & Privacy

- **Local Processing**: All automation runs locally on user's machine
- **User Consent**: Require explicit permission for all external integrations
- **Data Privacy**: No user data transmitted without consent
- **Secure Connections**: Use HTTPS and App Transport Security
- **Input Validation**: Validate and sanitize all user inputs

### ChromeDriver Integration

- **Installation Requirements:**
  - **Homebrew Installation:** `brew install chromedriver`
  - **Expected Path:** `/opt/homebrew/bin/chromedriver`
  - **Version Compatibility:** Must match Chrome browser version

### Permission Requirements

- **Full Disk Access:** ChromeDriver needs this to launch Chrome
- **Automation:** ODYSSEY needs this to control Chrome
- **System Events:** For browser automation capabilities
- **Accessibility:** Optional, provides additional features

### Error Handling

- **Check Installation:** Verify ChromeDriver is installed and accessible
- **Permission Validation:** Ensure all required permissions are granted
- **Process Management:** Handle ChromeDriver startup/shutdown gracefully
- **Fallback Strategies:** Provide clear error messages for missing dependencies

## üîß Development Workflow

### Git Commit Guidelines

- **Do NOT commit code with git until explicitly told to do so**
- Always wait for explicit permission before committing changes
- Use descriptive commit messages when committing
- Test thoroughly before requesting commit permission

### Build Process

- **Always rebuild app using `./Scripts/build.sh` after changing or fixing code**
- Never skip the build step after making changes
- Verify the app launches successfully after each build
- Check for any build warnings or errors

### Documentation Standards

- **Always update documentation if something changes**
- Keep README.md and other docs in sync with code changes
- Update any relevant documentation when adding new features
- Maintain accurate and current documentation

### Code Quality

- **All code must pass SwiftLint with zero errors and no new warnings before pushing or releasing**
- All linter violations must be fixed or explicitly justified in code review
- Do not push or release code with unresolved SwiftLint errors or warnings
- Keep the repository clean by removing duplicate information
- After changing any text in the UI always update French translation

### Setup

```bash
# Clone repository
git clone https://github.com/Amet13/ODYSSEY.git
cd ODYSSEY

# Install dependencies
brew install xcodegen
brew install swiftlint

# Generate Xcode project
xcodegen

# Build and run
./Scripts/build.sh
```

### Testing

- **Unit Tests:** Test all business logic and services
- **UI Tests:** Validate user interface functionality
- **Integration Tests:** Test automation workflows
- **Performance Tests:** Monitor memory usage and responsiveness

### Debugging

- **Logging:** Use `os.log` with appropriate categories
- **Console:** Check Console app for detailed logs
- **ChromeDriver:** Test automation manually with ChromeDriver
- **Network:** Monitor network requests and responses

## üìö Documentation Standards

- **Code Comments:** Use JSDoc-style comments for all public APIs
- **README Files:** Maintain comprehensive documentation in each directory
- **Changelog:** Document all changes in `CHANGELOG.md`
- **User Guides:** Provide clear installation and usage instructions
- **API Documentation:** Document all public interfaces and methods

## üöÄ Release Process

### Version Management

- **Semantic Versioning:** Follow MAJOR.MINOR.PATCH format
- **Changelog:** Update `CHANGELOG.md` with all changes
- **Version Numbers:** Update all version references consistently
- **Build Numbers:** Increment build number for each release

### Quality Assurance

- **Code Review:** Self-review all changes before submission
- **Testing:** Test on multiple macOS versions
- **Performance:** Monitor app size and memory usage
- **Security:** Validate all security settings and permissions

### Distribution

- **DMG Creation:** Use `create-dmg` for installer creation
- **Code Signing:** Sign with Developer ID for distribution
- **Notarization:** Notarize app for macOS security
- **GitHub Releases:** Create releases with proper documentation

## ü§ù Collaboration Guidelines

- **Pull Requests:** Use descriptive titles and detailed descriptions
- **Code Review:** Review for functionality, style, and security
- **Testing:** Ensure all changes are properly tested
- **Documentation:** Update documentation for all changes
- **Communication:** Use GitHub Issues and Discussions for collaboration

## üõ°Ô∏è Ethical Automation

- **Respect Terms of Service:** Follow website terms and conditions
- **Rate Limiting:** Implement appropriate delays and rate limits
- **User Consent:** Require explicit permission for automation
- **Community Benefit:** Focus on positive community impact
- **Transparency:** Be clear about automation capabilities and limitations

---

**Remember:** ODYSSEY is designed to help the Ottawa sports community by automating routine reservation tasks. Always prioritize user privacy, security, and ethical automation practices.
