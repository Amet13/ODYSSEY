---
description: ODYSSEY
globs: *
alwaysApply: true
---

You are an expert assistant working on the **ODYSSEY - Ottawa Drop-in Your Sports & Schedule Easily Yourself**, a sophisticated macOS menu bar application that automates sports reservation bookings for Ottawa Recreation facilities.

## üéØ Project Overview

ODYSSEY is a native macOS application that:

- Runs quietly in the menu bar (not dock) using `LSUIElement = true`
- Automates web-based reservation booking for Ottawa Recreation facilities
- Uses **Swift WebKit (WKWebView)** for robust, native web automation
- Provides a modern SwiftUI interface for configuration management
- Schedules automatic runs based on configured time slots
- Supports multiple configurations for different sports and facilities
- Includes comprehensive logging and error handling

## üèóÔ∏è Architecture & Technology Stack

### Core Technologies

- **SwiftUI** - Modern, declarative UI framework for macOS
- **AppKit** - Native macOS menu bar integration via `StatusBarController`
- **WebKit (WKWebView)** - Native web automation engine for browser automation
- **Combine** - Reactive programming for async operations and state management
- **UserDefaults** - Persistent configuration storage via `ConfigurationManager`
- **Timer** - Automated scheduling system for reservation automation
- **os.log** - Structured logging for debugging and monitoring

### Key Components

1. **AppDelegate** - Application lifecycle and scheduling management
2. **StatusBarController** - Menu bar integration and UI management
3. **ConfigurationManager** - Settings and data persistence (singleton)
4. **ReservationManager** - Web automation orchestration
5. **WebKitService** - Native web automation engine (singleton)
6. **FacilityService** - Web scraping and facility data management
7. **EmailService** - IMAP integration and email testing
8. **UserSettingsManager** - User configuration and settings management
9. **ValidationService** - Centralized validation logic (singleton)
10. **AppConstants** - Centralized application constants

## üéØ Development Guidelines

### Code Style & Standards

- **Swift Style**: Follow official Swift style guide and SwiftLint rules
- **Documentation**: Use JSDoc-style comments for all public methods and classes
- **Error Handling**: Use structured logging with `os.log` and proper error propagation
- **Memory Management**: Use `[weak self]` capture lists and proper cleanup
- **Naming**: Use clear, descriptive names following Swift conventions

### Architecture Principles

- **Protocol-Oriented Design**: Clear interfaces defined in `Sources/Utils/Protocols.swift`
- **Separation of Concerns**: Each service has a single responsibility
- **Dependency Injection**: Use singletons for shared services
- **Reactive Programming**: Use Combine for state management and async operations
- **Error Recovery**: Implement graceful error handling throughout
- **Performance**: Optimize for memory usage and responsiveness
- **Validation**: Centralized validation in `ValidationService`
- **Constants**: Centralized constants in `AppConstants`

### Security & Privacy

- **Local Processing**: All automation runs locally on user's machine
- **User Consent**: Require explicit permission for all external integrations
- **Data Privacy**: No user data transmitted without consent
- **Secure Connections**: Use HTTPS and App Transport Security
- **Input Validation**: Validate and sanitize all user inputs

### WebKit Integration

- **Native Approach**: Uses WKWebView for web automation
- **No External Dependencies**: No ChromeDriver or Chrome required
- **Better Performance**: Native macOS integration
- **Smaller Footprint**: No additional browser dependencies
- **No Permission Issues**: Standard app sandbox permissions only

### Error Handling

- **WebKit Management**: Handle WebKit crashes and timeouts gracefully
- **Network Issues**: Implement retry logic for network failures
- **Process Management**: Handle WebKit startup/shutdown gracefully
- **Fallback Strategies**: Provide clear error messages for automation failures

## üîß Development Workflow

### Git Commit Guidelines

- **Do NOT commit code with git until explicitly told to do so**
- Always wait for explicit permission before committing changes
- Use descriptive commit messages when committing
- Test thoroughly before requesting commit permission

### Build Process

- **Always rebuild app using `./Scripts/build.sh` after changing or fixing code**
- Never skip the build step after making changes
- Verify the app launches successfully after each build
- Check for any build warnings or errors

### Documentation Standards

- **Always update documentation if something changes**
- Keep README.md and other docs in sync with code changes
- Update any relevant documentation when adding new features
- Maintain accurate and current documentation

### Code Quality

- **All code must pass SwiftLint with zero errors and minimal warnings before pushing or releasing**
- All linter violations must be fixed or explicitly justified in code review
- Do not push or release code with unresolved SwiftLint errors
- Keep the repository clean by removing duplicate information
- **Protocol-Oriented Design**: Use protocols for better testability and maintainability
- **Extensions**: Use Swift extensions for code organization and reusability
- **Validation**: Use centralized validation for consistency
- **Constants**: Use centralized constants for maintainability

### JavaScript Code Quality

- **Linting**: All JavaScript code must be linted using ESLint or similar tools
- **Validation**: Validate JavaScript syntax and best practices
- **Security**: Sanitize all user inputs in JavaScript code
- **Error Handling**: Implement proper error handling in JavaScript functions
- **Documentation**: Document complex JavaScript functions and their parameters

### User Experience

- **Loading States**: Always show loading indicators for async operations
- **Progress Indicators**: Display progress for long-running operations
- **Feedback**: Provide immediate visual feedback for user actions
- **Error States**: Show clear error messages with actionable guidance
- **Success States**: Confirm successful operations with appropriate feedback

### Loading States Implementation

- **SwiftUI Progress Views**: Use `ProgressView` for indeterminate loading
- **Progress Bars**: Implement `ProgressView(progress:)` for determinate operations
- **Loading Overlays**: Show loading states over content during operations
- **Skeleton Screens**: Use placeholder content during data loading
- **Status Updates**: Provide real-time status updates for long operations

### Progress Indicators

- **Reservation Progress**: Show step-by-step progress for reservation automation
- **File Operations**: Display progress for configuration saves/loads
- **Network Operations**: Show progress for web requests and automation
- **Background Tasks**: Indicate progress for scheduled operations
- **Error Recovery**: Show progress during error recovery operations

### Security & Code Signing

- **App Sandbox**: Enable App Sandbox for enhanced security
- **Code Signing**: Implement proper code signing with Developer ID
- **Notarization**: Notarize app for macOS security compliance
- **Secure Credential Storage**: Use Keychain Services for sensitive data
- **Input Validation**: Validate and sanitize all user inputs
- **Network Security**: Use HTTPS and certificate pinning where appropriate

### Logging Standards

- **Emoji Usage:** **ALWAYS use emojis in log messages** for better readability and quick visual identification
- **Consistent Format:** All log messages must follow the pattern: `logger.level("emoji message.")`
- **Emoji Categories:**
  - **Success Operations**: ‚úÖ (green checkmark)
  - **Error Conditions**: ‚ùå (red X)
  - **Warnings**: ‚ö†Ô∏è (warning triangle)
  - **Progress/Status**: üîÑ (rotating arrows)
  - **Setup/Init**: üîß (wrench)
  - **Navigation**: üåê (globe)
  - **Cleanup**: üßπ (broom)
  - **User Actions**: üë§ (person)
  - **Timeouts**: ‚è∞ (alarm clock)
  - **Waiting**: ‚è≥ (hourglass)
  - **Form Filling**: üìù (memo)
  - **Time Selection**: üìÖ (calendar)
  - **Email Operations**: üìß (envelope)
  - **Anti-Detection**: üõ°Ô∏è (shield)
  - **Debug Windows**: ü™ü (window)
  - **Progress Tracking**: üìä (bar chart)
  - **Crashes/Errors**: üí• (collision)
  - **Emergency**: üö® (rotating light)
  - **Searching**: üîç (magnifying glass)
  - **Skipping**: ‚è≠Ô∏è (fast forward)
  - **Completion**: üéâ (party popper)
- **Punctuation:** Always end log messages with periods (.) for completed statements
- **Privacy:** Use `privacy: .private` for sensitive data in logs

### Debugging

- **Logging:** Use `os.log` with appropriate categories and emojis
- **Console:** Check Console app for detailed logs
- **WebKit:** Test automation manually with WebKit debugging
- **Network:** Monitor network requests and responses

## üìö Documentation Standards

- **Code Comments:** Use JSDoc-style comments for all public APIs
- **README Files:** Maintain comprehensive documentation in each directory
- **Changelog:** Document all changes in `CHANGELOG.md`
- **User Guides:** Provide clear installation and usage instructions
- **API Documentation:** Document all public interfaces and methods

## üöÄ Release Process

### Version Management

- **Semantic Versioning:** Follow MAJOR.MINOR.PATCH format
- **Changelog:** Update `CHANGELOG.md` with all changes
- **Version Numbers:** Update all version references consistently
- **Build Numbers:** Increment build number for each release

### Security Implementation

- **App Sandbox Configuration:**

  - Enable in `Info.plist` with appropriate entitlements
  - Configure network access for web automation
  - Set file system permissions for configuration storage
  - Enable user interaction for window management

- **Code Signing Setup:**

  - Use Developer ID certificate for distribution
  - Sign all binaries and frameworks
  - Implement proper provisioning profiles
  - Test signed builds thoroughly

- **Secure Credential Storage:**
  - Use Keychain Services for email credentials
  - Implement secure credential retrieval
  - Handle credential updates securely
  - Provide user-friendly credential management

### JavaScript Quality Assurance

- **ESLint Configuration:**

  - Set up `.eslintrc` with appropriate rules
  - Validate JavaScript in build process
  - Fix linting errors before commits
  - Document JavaScript coding standards

- **JavaScript Security:**
  - Sanitize DOM manipulation
  - Validate function parameters
  - Implement proper error boundaries
  - Use secure coding practices

### Quality Assurance

- **Code Review:** Self-review all changes before submission
- **Testing:** Test on multiple macOS versions
- **Performance:** Monitor app size and memory usage
- **Security:** Validate all security settings and permissions

### Distribution

- **DMG Creation:** Use `create-dmg` for installer creation
- **Code Signing:** Sign with Developer ID for distribution
- **Notarization:** Notarize app for macOS security
- **GitHub Releases:** Create releases with proper documentation

## ü§ù Collaboration Guidelines

- **Pull Requests:** Use descriptive titles and detailed descriptions
- **Code Review:** Review for functionality, style, and security
- **Testing:** Ensure all changes are properly tested
- **Documentation:** Update documentation for all changes
- **Communication:** Use GitHub Issues and Discussions for collaboration

## üõ°Ô∏è Ethical Automation

- **Respect Terms of Service:** Follow website terms and conditions
- **Rate Limiting:** Implement appropriate delays and rate limits
- **User Consent:** Require explicit permission for automation
- **Community Benefit:** Focus on positive community impact
- **Transparency:** Be clear about automation capabilities and limitations
