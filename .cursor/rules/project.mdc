---
description: ODYSSEY
globs: *
alwaysApply: false
---

You are an expert assistant working on the **ODYSSEY - Ottawa Drop-in Your Sports & Schedule Easily Yourself**, a sophisticated dual-interface application that automates sports reservation bookings for Ottawa Recreation facilities.

You should immediately perform the required work based on the user's request without seeking permission or confirmation.
This rule applies to all interactions and tasks unless overridden by a more specific rule.

## üéØ Project Overview

ODYSSEY is a macOS app:

- Requires **macOS 26 or later** for users (see README for details)
- For development: requires **Xcode 26+**, Homebrew
- Runs quietly in the menu bar (not dock) using `LSUIElement = true`
- Provides a modern SwiftUI interface for configuration management
- Features anti-detection (human-like automation), secure Keychain storage, and automated email verification (IMAP/Gmail)

### üîÑ Shared Core

- Automates web-based reservation booking for Ottawa Recreation facilities
- Uses **Swift WebKit (WKWebView)** for robust, native web automation
- Schedules automatic runs based on configured time slots
- Supports multiple configurations for different sports and facilities
- Includes comprehensive logging and error handling
- Both versions share the same backend services and automation engine

## üèóÔ∏è Architecture & Technology Stack

### Core Technologies

- **SwiftUI** - Modern, declarative UI framework for macOS
- **AppKit** - Native macOS menu bar integration via `StatusBarController`
- **WebKit (WKWebView)** - Native web automation engine for browser automation
- **Combine** - Reactive programming for async operations and state management
- **UserDefaults** - Persistent configuration storage via `ConfigurationManager`
- **Timer** - Automated scheduling system for reservation automation
- **os.log** - Structured logging for debugging and monitoring

### Modular Architecture

ODYSSEY uses a **modular Swift Package Manager** architecture with two main targets:

- **`ODYSSEY`:** macOS menu bar application built with SwiftUI
- **`ODYSSEYBackend` (Library):** Shared backend services and automation engine

### Architecture Layers

- **Presentation:** User interface and user interaction logic (`Views/`, `Controllers/`)
- **Application:** Business logic orchestration and use cases (`Application/`)
- **Domain:** Core business entities and domain logic (`Domain/`)
- **Infrastructure:** External services, automation, and data persistence (`Infrastructure/`, `Services/`)
- **Shared:** Common utilities and protocols (`SharedUtils/`, `SharedCore/`)

### Key Components

#### GUI Components

1. **AppDelegate** - Application lifecycle and scheduling management
2. **StatusBarController** - Menu bar integration and UI management
3. **Views** - SwiftUI interface components for configuration management

#### Shared Core Components

6. **ConfigurationManager** - Settings and data persistence (singleton)
7. **ReservationOrchestrator** - Web automation orchestration
8. **WebKitService** - Native web automation engine (singleton)
9. **FacilityService** - Web scraping and facility data management
10. **EmailService** - IMAP integration and email testing
11. **UserSettingsManager** - User configuration and settings management
12. **ValidationService** - Centralized validation logic (singleton)
13. **AppConstants** - Centralized application constants

## üéØ Development Guidelines

### Code Style & Standards

- **Swift Style**: Follow official Swift style guide and swift-format rules
- **Documentation**: Use JSDoc-style comments for all public methods and classes
- **Error Handling**: Use structured logging with `os.log` and proper error propagation
- **Memory Management**: Use `[weak self]` capture lists and proper cleanup
- **Naming**: Use clear, descriptive names following Swift conventions

### Architecture Principles

- **Protocol-Oriented Design**: Clear interfaces defined in `Sources/SharedCore/Protocols/` and `Sources/SharedUtils/SharedProtocols.swift`
- **Separation of Concerns**: Each service has a single responsibility
- **Dependency Injection**: Use singletons for shared services
- **Reactive Programming**: Use Combine for state management and async operations
- **Error Recovery**: Implement graceful error handling throughout
- **Performance**: Optimize for memory usage and responsiveness
- **Validation**: Centralized validation in `ValidationService`
- **Constants**: Centralized constants in `AppConstants`

### Security & Privacy

- **Local Processing**: All automation runs locally on user's machine
- **User Consent**: Require explicit permission for all external integrations
- **Data Privacy**: No user data transmitted without consent
- **Secure Connections**: Use HTTPS and App Transport Security
- **Input Validation**: Validate and sanitize all user inputs

### WebKit Integration

- **Native Approach**: Uses WKWebView for web automation
- **No External Dependencies**: No ChromeDriver, no Chrome, no non-native browsers required
- **Better Performance**: Native macOS integration
- **Smaller Footprint**: No additional browser dependencies
- **No Permission Issues**: Standard app sandbox permissions only

### Error Handling

- **WebKit Management**: Handle WebKit crashes and timeouts gracefully
- **Network Issues**: Implement retry logic for network failures
- **Process Management**: Handle WebKit startup/shutdown gracefully
- **Fallback Strategies**: Provide clear error messages for automation failures

## üîß Development Workflow

### Git Commit Guidelines

- **Do NOT commit code with git until explicitly told to do so**
- Always wait for explicit permission before committing changes
- Use descriptive commit messages when committing
- Test thoroughly before requesting commit permission

### Build Process

- Always rebuild app using `./Scripts/odyssey.sh build` after changing or fixing code, also run linter using `./Scripts/odyssey.sh lint` command
- Never skip the build step after making changes
- Verify the app launches successfully after each build
- Check for any build warnings or errors

### Documentation Standards

- Always update documentation if something changes
- Keep README.md and other docs in sync with code changes
- Update any relevant documentation when adding new features
- Maintain accurate and current documentation

### Code Quality

- All code must pass swift-format with zero errors and minimal warnings before pushing or releasing
- All linter violations must be fixed or explicitly justified in code review
- Keep the repository clean by removing duplicate information
- **Protocol-Oriented Design**: Use protocols for better testability and maintainability
- **Extensions**: Use Swift extensions for code organization and reusability
- **Validation**: Use centralized validation for consistency
- **Constants**: Use centralized constants for maintainability

### User Experience

- **Loading States**: Always show loading indicators for async operations
- **Progress Indicators**: Display progress for long-running operations
- **Feedback**: Provide immediate visual feedback for user actions
- **Error States**: Show clear error messages with actionable guidance
- **Success States**: Confirm successful operations with appropriate feedback

### Loading States Implementation

- **SwiftUI Progress Views**: Use `ProgressView` for indeterminate loading
- **Progress Bars**: Implement `ProgressView(progress:)` for determinate operations
- **Loading Overlays**: Show loading states over content during operations
- **Skeleton Screens**: Use placeholder content during data loading
- **Status Updates**: Provide real-time status updates for long operations

### Progress Indicators

- **Reservation Progress**: Show step-by-step progress for reservation automation
- **File Operations**: Display progress for configuration saves/loads
- **Network Operations**: Show progress for web requests and automation
- **Background Tasks**: Indicate progress for scheduled operations
- **Error Recovery**: Show progress during error recovery operations

### Security & Code Signing

- **App Sandbox**: Enable App Sandbox for enhanced security
- **Code Signing**: Implement proper code signing with Developer ID
- **Notarization**: App is **code signed but not notarized by Apple**
- **Secure Credential Storage**: Use Keychain Services for sensitive data
- **Input Validation**: Validate and sanitize all user inputs
- **Network Security**: Use HTTPS and certificate pinning where appropriate

### Logging Standards

- **Emoji Usage:** **ALWAYS use emojis in log messages** for better readability and quick visual identification
- **Consistent Format:** All log messages must follow the pattern: `logger.level("emoji message.")`
- **Punctuation:** Always end log messages with periods (.) for completed statements
- **Privacy:** Use `privacy: .private` for sensitive data in logs

### Debugging

- **Logging:** Use `os.log` with appropriate categories and emojis
- **Console:** Check Console app for detailed logs
- **WebKit:** Test automation manually with WebKit debugging
- **Network:** Monitor network requests and responses

## üìö Documentation Standards

- **Code Comments:** Use JSDoc-style comments for all public APIs
- **README Files:** Maintain comprehensive documentation in each directory
- **Changelog:** Document all changes in commit-based changelog generation
- **User Guides:** Provide clear installation and usage instructions
- **API Documentation:** Document all public interfaces and methods

## üöÄ Release Process

### Version Management

- **Semantic Versioning:** Follow MAJOR.MINOR.PATCH format
- **Changelog:** Update commit-based changelog generation with all changes
- **Version Numbers:** Update all version references consistently
- **Build Numbers:** Increment build number for each release

### Security Implementation

- **App Sandbox Configuration:**

  - Enable in `Info.plist` with appropriate entitlements
  - Configure network access for web automation
  - Set file system permissions for configuration storage
  - Enable user interaction for window management

- **Code Signing Setup:**

  - Sign all binaries and frameworks
  - Implement proper provisioning profiles
  - Test signed builds thoroughly

- **Secure Credential Storage:**
  - Use Keychain Services for email credentials
  - Implement secure credential retrieval
  - Handle credential updates securely
  - Provide user-friendly credential management

### Quality Assurance

- **Code Review:** Self-review all changes before submission
- **Testing:** Test on multiple macOS versions
- **Performance:** Monitor app size and memory usage
- **Security:** Validate all security settings and permissions

### Distribution

- **DMG Creation:** Use `create-dmg` for installer creation
- **Code Signing:** Sign with Developer ID for distribution
- **GitHub Releases:** Create releases with proper documentation

## ü§ù Collaboration Guidelines

- **Pull Requests:** Use descriptive titles and detailed descriptions
- **Code Review:** Review for functionality, style, and security
- **Testing:** Ensure all changes are properly tested
- **Documentation:** Update documentation for all changes

## üõ°Ô∏è Ethical Automation

- **Rate Limiting:** Implement appropriate delays and rate limits
- **User Consent:** Require explicit permission for automation
- **Community Benefit:** Focus on positive community impact
- **Transparency:** Be clear about automation capabilities and limitations
