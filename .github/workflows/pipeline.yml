---
name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  # For PRs and main branch pushes - just lint and build
  ci:
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.4"

      - name: Install dependencies
        run: |
          brew install xcodegen swiftlint swiftformat shellcheck yamllint markdownlint actionlint

      - name: Generate Xcode project
        run: |
          xcodegen --spec Config/project.yml

      - name: Run all linters
        run: |
          echo "üßπ Running comprehensive linting check..."
          chmod +x Scripts/lint-all.sh
          ./Scripts/lint-all.sh

      - name: Build CLI
        run: |
          echo "üî® Building ODYSSEY CLI..."
          swift build --product odyssey-cli --configuration release

          # Get CLI path and test it
          CLI_PATH=$(swift build --product odyssey-cli --configuration release --show-bin-path)/odyssey-cli
          chmod +x "$CLI_PATH"
          "$CLI_PATH" version
          echo "‚úÖ CLI built successfully"

      - name: Build App
        run: |
          echo "üî® Building ODYSSEY App..."
          xcodebuild build \
            -project Config/ODYSSEY.xcodeproj \
            -scheme ODYSSEY \
            -configuration Release \
            -destination 'platform=macOS' \
            -quiet \
            -showBuildTimingSummary
          echo "‚úÖ App built successfully"

  # For releases - lint, build, and create release
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.4"

      - name: Install dependencies
        run: |
          brew install xcodegen swiftlint swiftformat shellcheck yamllint markdownlint actionlint create-dmg

      - name: Generate Xcode project
        run: |
          xcodegen --spec Config/project.yml

      - name: Run all linters
        run: |
          echo "üßπ Running comprehensive linting check..."
          chmod +x Scripts/lint-all.sh
          ./Scripts/lint-all.sh

      - name: Build CLI
        run: |
          echo "üî® Building ODYSSEY CLI..."
          swift build --product odyssey-cli --configuration release

          # Get CLI path
          CLI_PATH=$(swift build --product odyssey-cli --configuration release --show-bin-path)/odyssey-cli
          chmod +x "$CLI_PATH"
          "$CLI_PATH" version
          echo "‚úÖ CLI built successfully"

      - name: Build App
        run: |
          echo "üî® Building ODYSSEY App..."
          xcodebuild build \
            -project Config/ODYSSEY.xcodeproj \
            -scheme ODYSSEY \
            -configuration Release \
            -destination 'platform=macOS' \
            -quiet \
            -showBuildTimingSummary
          echo "‚úÖ App built successfully"

      - name: Code Sign App
        run: |
          APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "ODYSSEY.app" -type d 2>/dev/null | head -1)
          echo "üîê Code signing app at: $APP_PATH"

          # Remove any existing code signing
          codesign --remove-signature "$APP_PATH" 2>/dev/null || true

          # Sign with ad-hoc signature
          codesign --force --deep --sign - "$APP_PATH"

          # Verify the signature
          codesign -dv "$APP_PATH"
          echo "‚úÖ App code signing completed"

      - name: Code Sign CLI
        run: |
          echo "üîê Code signing CLI..."

          CLI_PATH=$(swift build --product odyssey-cli --configuration release --show-bin-path)/odyssey-cli

          # Remove any existing code signing
          codesign --remove-signature "$CLI_PATH" 2>/dev/null || true

          # Sign with ad-hoc signature
          codesign --force --deep --sign - "$CLI_PATH"

          # Verify the signature
          codesign -dv "$CLI_PATH"
          echo "‚úÖ CLI code signing completed"

      - name: Prepare release files
        run: |
          echo "üì¶ Preparing release files..."

          # Get app path
          APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "ODYSSEY.app" -type d 2>/dev/null | head -1)
          CLI_PATH=$(swift build --product odyssey-cli --configuration release --show-bin-path)/odyssey-cli

          # Create release directory
          mkdir -p release_files

          # Copy app to release directory with simple name
          cp -R "$APP_PATH" release_files/ODYSSEY.app

          # Copy CLI to release directory with simple name
          cp "$CLI_PATH" release_files/odyssey-cli
          chmod +x release_files/odyssey-cli

          echo "‚úÖ Release files prepared"

      - name: Generate commit-based changelog
        id: changelog
        run: |
          echo "üìù Generating commit-based changelog..."

          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}

          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            # Get commits between previous tag and current tag
            CHANGELOG=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          else
            # If no previous tag, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s" HEAD)
          fi

          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "‚úÖ Commit-based changelog generated"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_files/ODYSSEY.app
            release_files/odyssey-cli
          name: ODYSSEY ${{ github.ref_name }}
          body: |
            # üöÄ ODYSSEY ${{ github.ref_name }} Release

            ## üìã Changes

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## üì¶ Installation

            ### üñ•Ô∏è GUI Application
            1. Download `ODYSSEY.app` above
            2. Drag to your Applications folder
            3. Right-click and select "Open" on first launch

            ### üíª CLI Tool
            1. Download `odyssey-cli` above
            2. Make executable: `chmod +x odyssey-cli`
            3. Export token from GUI: `export ODYSSEY_EXPORT_TOKEN="<token>"`
            4. Run: `./odyssey-cli run`

            ## ‚öôÔ∏è Requirements
            - macOS 15 or later

            ## üîß Features

            ### üñ•Ô∏è GUI Application
            - Native macOS menu bar integration
            - Smart scheduling system
            - Easy configuration interface
            - Native WebKit automation (no ChromeDriver required)
            - Multiple configurations
            - Real-time status
            - Built-in logs with emoji indicators
            - Secure credential storage (Keychain)
            - Automated email verification (IMAP/Gmail)
            - Anti-detection (human-like automation)
            - Step-by-step reservation progress
            - Comprehensive error handling and cleanup

            ### üíª CLI Tool
            - Command-line interface for remote automation
            - Parallel execution of multiple reservations
            - Headless mode (no browser window)
            - CI/CD pipeline integration
            - Real-time progress tracking
            - Same WebKit automation as GUI
            - Secure token-based configuration
            - Comprehensive logging and error handling
            - Pre-built binary (no extraction needed)

            ## üõ°Ô∏è Security
            - This app is code signed but **not notarized by Apple**
            - All automation runs locally on your machine
            - No user data transmitted without consent

            ## üêõ Support
            - [Report Issues](https://github.com/Amet13/odyssey/issues)

            ---
            **Made with ‚ù§Ô∏è for the Ottawa sports community**
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
