---
name: Build & Release

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  # For PRs and main branch pushes - just lint and build
  ci:
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.4"

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            /opt/homebrew/Cellar
            /opt/homebrew/Library/Taps
            /opt/homebrew/var/homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('Scripts/odyssey.sh') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Check Homebrew cache status
        run: |
          echo "üîç Checking Homebrew cache status..."
          echo "Installed packages:"
          brew list --formula | grep -E "(xcodegen|swift-format|shellcheck|yamllint|markdownlint|actionlint|create-dmg)" || echo "No cached packages found"

      - name: Run CI pipeline
        env:
          CI: true
        run: |
          ./Scripts/odyssey.sh ci

      - name: Show final cache status
        run: |
          echo "üîç Final Homebrew cache status:"
          echo "All installed packages:"
          brew list --formula | sort

  # For releases - use our deploy script
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.4"

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            /opt/homebrew/Cellar
            /opt/homebrew/Library/Taps
            /opt/homebrew/var/homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('Scripts/odyssey.sh') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Check Homebrew cache status
        run: |
          echo "üîç Checking Homebrew cache status..."
          echo "Installed packages:"
          brew list --formula | grep -E "(xcodegen|swift-format|shellcheck|yamllint|markdownlint|actionlint|create-dmg)" || echo "No cached packages found"

      - name: Run CI pipeline
        env:
          CI: true
        run: |
          ./Scripts/odyssey.sh ci

      - name: Show final cache status
        run: |
          echo "üîç Final Homebrew cache status:"
          echo "All installed packages:"
          brew list --formula | sort

      - name: Build and prepare release
        run: |
          ./Scripts/odyssey.sh deploy

      - name: Generate commit-based changelog
        id: changelog
        run: |
          ./Scripts/odyssey.sh changelog

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_files/odyssey-cli
            ODYSSEY.dmg
          name: ${{ github.ref_name }}
          body: |
            # üöÄ ODYSSEY ${{ github.ref_name }} Release

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## üì¶ Installation

            ### üñ•Ô∏è GUI Application
            1. Download `ODYSSEY.dmg` above
            2. Open the DMG file and drag `ODYSSEY.app` to your Applications folder
            3. Add ODYSSEY to the trust list: `sudo xattr -rd com.apple.quarantine /Applications/ODYSSEY.app`
            4. Right-click and select "Open" on first launch

            ### üíª CLI Tool
            1. Download `odyssey-cli` above
            2. Make executable: `chmod +x odyssey-cli`
            3. Add ODYSSEY to the trust list: `sudo xattr -rd com.apple.quarantine ./odyssey-cli`
            4. Export token from GUI: `export ODYSSEY_EXPORT_TOKEN="<token>"`
            5. Run: `./odyssey-cli run`

            ## ‚öôÔ∏è Requirements
            - macOS 15 or later
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
